// Generated by tabtoy
// Version: 2.8.6
// DO NOT EDIT!!
using System.Collections.Generic;

namespace cfg
{
	
	// Defined in table: Unit
	public enum PropTag
	{
		
		
		Lv = 0, // 等级
		
		
		Exp = 1, // 经验
		
		
		Learn = 2, // 学识
		
		
		Hp = 3, // 血
		
		
		Mp = 4, // 蓝
		
		
		Str = 5, // 力量
		
		
		Dex = 6, // 敏捷
		
		
		Int = 7, // 智力
		
		
		Luc = 8, // 幸运
		
		
		Def = 9, // 防御
		
		
		Arm = 10, // 护甲
		
		
		HitPer = 11, // 基础命中率
		
		
		CritPer = 12, // 暴击率
		
		
		CritDamPer = 13, // 暴击伤害率
		
		
		PhyDmg = 14, // 物理伤害
		
		
		MagicDmg = 15, // 魔法伤害
		
		
		IceDmg = 16, // 冰伤害
		
		
		FireDmg = 17, // 火伤害
		
		
		LightDmg = 18, // 电伤害
		
		
		PosionDmg = 19, // 毒伤害
		
		
		EleDmg = 20, // 元素伤害
		
		
		IceDmgPer = 21, // 冰伤害加成率
		
		
		FireDmgPer = 22, // 火伤害加成率
		
		
		LightDmgPer = 23, // 电伤害加成率
		
		
		PosionDmgPer = 24, // 毒伤害加成率
		
		
		EleDmgPer = 25, // 元素伤害加成率
		
		
		IceRes = 26, // 冰抗
		
		
		FireRes = 27, // 火抗
		
		
		LightRes = 28, // 电抗
		
		
		PosionRes = 29, // 毒抗
		
		
		EleRes = 30, // 元素抗性
		
		
		ShotSpeed = 31, // 出手速度
	
	}
	
	

	// Defined in table: DataConfig
	
	public partial class DataConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Buff
		/// </summary>
		public List<BuffDefine> Buff = new List<BuffDefine>(); 
		
		/// <summary> 
		/// Skill
		/// </summary>
		public List<SkillDefine> Skill = new List<SkillDefine>(); 
		
		/// <summary> 
		/// SkillEffect
		/// </summary>
		public List<SkillEffectDefine> SkillEffect = new List<SkillEffectDefine>(); 
		
		/// <summary> 
		/// Modifier
		/// </summary>
		public List<ModifierDefine> Modifier = new List<ModifierDefine>(); 
		
		/// <summary> 
		/// Unit
		/// </summary>
		public List<UnitDefine> Unit = new List<UnitDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, BuffDefine> _BuffByID = new Dictionary<int, BuffDefine>();
        public BuffDefine GetBuffByID(int ID, BuffDefine def = default(BuffDefine))
        {
            BuffDefine ret;
            if ( _BuffByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BuffDefine) )
			{
				TableLogger.ErrorLine("GetBuffByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SkillDefine> _SkillByID = new Dictionary<int, SkillDefine>();
        public SkillDefine GetSkillByID(int ID, SkillDefine def = default(SkillDefine))
        {
            SkillDefine ret;
            if ( _SkillByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillDefine) )
			{
				TableLogger.ErrorLine("GetSkillByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SkillEffectDefine> _SkillEffectByID = new Dictionary<int, SkillEffectDefine>();
        public SkillEffectDefine GetSkillEffectByID(int ID, SkillEffectDefine def = default(SkillEffectDefine))
        {
            SkillEffectDefine ret;
            if ( _SkillEffectByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillEffectDefine) )
			{
				TableLogger.ErrorLine("GetSkillEffectByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ModifierDefine> _ModifierByID = new Dictionary<int, ModifierDefine>();
        public ModifierDefine GetModifierByID(int ID, ModifierDefine def = default(ModifierDefine))
        {
            ModifierDefine ret;
            if ( _ModifierByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ModifierDefine) )
			{
				TableLogger.ErrorLine("GetModifierByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, UnitDefine> _UnitByID = new Dictionary<int, UnitDefine>();
        public UnitDefine GetUnitByID(int ID, UnitDefine def = default(UnitDefine))
        {
            UnitDefine ret;
            if ( _UnitByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(UnitDefine) )
			{
				TableLogger.ErrorLine("GetUnitByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<DataConfig> DataConfigDeserializeHandler = new tabtoy.DeserializeHandler<DataConfig>(Deserialize);
		public static void Deserialize( DataConfig ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Buff.Add( reader.ReadStruct<BuffDefine>(BuffDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Skill.Add( reader.ReadStruct<SkillDefine>(SkillDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.SkillEffect.Add( reader.ReadStruct<SkillEffectDefine>(SkillEffectDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.Modifier.Add( reader.ReadStruct<ModifierDefine>(ModifierDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.Unit.Add( reader.ReadStruct<UnitDefine>(UnitDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build Buff Index
			for( int i = 0;i< ins.Buff.Count;i++)
			{
				var element = ins.Buff[i];
				
				ins._BuffByID.Add(element.ID, element);
				
			}
			
			// Build Skill Index
			for( int i = 0;i< ins.Skill.Count;i++)
			{
				var element = ins.Skill[i];
				
				ins._SkillByID.Add(element.ID, element);
				
			}
			
			// Build SkillEffect Index
			for( int i = 0;i< ins.SkillEffect.Count;i++)
			{
				var element = ins.SkillEffect[i];
				
				ins._SkillEffectByID.Add(element.ID, element);
				
			}
			
			// Build Modifier Index
			for( int i = 0;i< ins.Modifier.Count;i++)
			{
				var element = ins.Modifier[i];
				
				ins._ModifierByID.Add(element.ID, element);
				
			}
			
			// Build Unit Index
			for( int i = 0;i< ins.Unit.Count;i++)
			{
				var element = ins.Unit[i];
				
				ins._UnitByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<BuffDefine> BuffDefineDeserializeHandler = new tabtoy.DeserializeHandler<BuffDefine>(Deserialize);
		public static void Deserialize( BuffDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Duration = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Args.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Group = reader.ReadInt32();
                	}
                	break; 
                	case 0x70008:
                	{
						ins.IsDebuff = reader.ReadBool();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Overlay = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.ImmunityList.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.ConflictList.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x7000c:
                	{
						ins.IsDisplay = reader.ReadBool();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.Effect = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SkillDefine> SkillDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillDefine>(Deserialize);
		public static void Deserialize( SkillDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x70003:
                	{
						ins.IsPassive = reader.ReadBool();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.TargetFilter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.ModifierIDs.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10006:
                	{
						ins.CostMp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.CD = reader.ReadInt32();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.SkillEffect = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.TargetEffect = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SkillEffectDefine> SkillEffectDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillEffectDefine>(Deserialize);
		public static void Deserialize( SkillEffectDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.EffectType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Duration = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Prefab = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ModifierDefine> ModifierDefineDeserializeHandler = new tabtoy.DeserializeHandler<ModifierDefine>(Deserialize);
		public static void Deserialize( ModifierDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Args.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<Prop> PropDeserializeHandler = new tabtoy.DeserializeHandler<Prop>(Deserialize);
		public static void Deserialize( Prop ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Tag = reader.ReadEnum<PropTag>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Value = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<UnitDefine> UnitDefineDeserializeHandler = new tabtoy.DeserializeHandler<UnitDefine>(Deserialize);
		public static void Deserialize( UnitDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Camp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Skin = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Hp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Mp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Def = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.PhyAtk = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.MagAtk = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Hit = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Dod = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.CritRate = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Buff
	[System.Serializable]
	public partial class BuffDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// buff类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 持续回合
		/// </summary>
		public int Duration = 0; 
		
		/// <summary> 
		/// 参数
		/// </summary>
		public List<int> Args = new List<int>(); 
		
		/// <summary> 
		/// buff组标识
		/// </summary>
		public int Group = 0; 
		
		/// <summary> 
		/// 是否减益
		/// </summary>
		public bool IsDebuff = false; 
		
		/// <summary> 
		/// 覆盖标签
		/// </summary>
		public int Overlay = 0; 
		
		/// <summary> 
		/// 免疫buff列表
		/// </summary>
		public List<int> ImmunityList = new List<int>(); 
		
		/// <summary> 
		/// 冲突buff列表
		/// </summary>
		public List<int> ConflictList = new List<int>(); 
		
		/// <summary> 
		/// 是否显示
		/// </summary>
		public bool IsDisplay = false; 
		
		/// <summary> 
		/// 特效
		/// </summary>
		public string Effect = ""; 
	
	

	} 

	// Defined in table: Skill
	[System.Serializable]
	public partial class SkillDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 技能描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 是否被动
		/// </summary>
		public bool IsPassive = false; 
		
		/// <summary> 
		/// 目标筛选类型
		/// </summary>
		public int TargetFilter = 0; 
		
		/// <summary> 
		/// 修改器id列表
		/// </summary>
		public List<int> ModifierIDs = new List<int>(); 
		
		/// <summary> 
		/// 耗费mp
		/// </summary>
		public int CostMp = 0; 
		
		/// <summary> 
		/// 冷却时间(回合)
		/// </summary>
		public int CD = 0; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 技能特效
		/// </summary>
		public int SkillEffect = 0; 
		
		/// <summary> 
		/// 目标特效
		/// </summary>
		public int TargetEffect = 0; 
	
	

	} 

	// Defined in table: SkillEffect
	[System.Serializable]
	public partial class SkillEffectDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 特效类型
		/// </summary>
		public int EffectType = 0; 
		
		/// <summary> 
		/// 持续时间(毫秒)
		/// </summary>
		public int Duration = 0; 
		
		/// <summary> 
		/// 特效预制体
		/// </summary>
		public string Prefab = ""; 
	
	

	} 

	// Defined in table: Modifier
	[System.Serializable]
	public partial class ModifierDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 效果器描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 效果器类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 参数
		/// </summary>
		public List<int> Args = new List<int>(); 
	
	

	} 

	// Defined in table: Unit
	[System.Serializable]
	public partial class Prop
	{
	
		
		
		public PropTag Tag = PropTag.Lv; // 类型
		
		
		public int Value = 0; // 值
	
	

	} 

	// Defined in table: Unit
	[System.Serializable]
	public partial class UnitDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 阵营
		/// </summary>
		public int Camp = 0; 
		
		/// <summary> 
		/// 类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 皮肤
		/// </summary>
		public string Skin = ""; 
		
		/// <summary> 
		/// 携带技能
		/// </summary>
		public List<int> Skills = new List<int>(); 
		
		/// <summary> 
		/// 血
		/// </summary>
		public int Hp = 0; 
		
		/// <summary> 
		/// 蓝
		/// </summary>
		public int Mp = 0; 
		
		/// <summary> 
		/// 防御
		/// </summary>
		public int Def = 0; 
		
		/// <summary> 
		/// 物攻
		/// </summary>
		public int PhyAtk = 0; 
		
		/// <summary> 
		/// 魔攻
		/// </summary>
		public int MagAtk = 0; 
		
		/// <summary> 
		/// 命中值
		/// </summary>
		public int Hit = 0; 
		
		/// <summary> 
		/// 闪避值
		/// </summary>
		public int Dod = 0; 
		
		/// <summary> 
		/// 暴击率
		/// </summary>
		public int CritRate = 0; 
	
	

	} 

}
