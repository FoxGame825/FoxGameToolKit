// Generated by tabtoy
// Version: 2.8.6
// DO NOT EDIT!!
package cfg

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: Unit
type PropTag int32

const (

	// 等级
	PropTag_Lv PropTag = 0

	// 经验
	PropTag_Exp PropTag = 1

	// 学识
	PropTag_Learn PropTag = 2

	// 血
	PropTag_Hp PropTag = 3

	// 蓝
	PropTag_Mp PropTag = 4

	// 力量
	PropTag_Str PropTag = 5

	// 敏捷
	PropTag_Dex PropTag = 6

	// 智力
	PropTag_Int PropTag = 7

	// 幸运
	PropTag_Luc PropTag = 8

	// 防御
	PropTag_Def PropTag = 9

	// 护甲
	PropTag_Arm PropTag = 10

	// 基础命中率
	PropTag_HitPer PropTag = 11

	// 暴击率
	PropTag_CritPer PropTag = 12

	// 暴击伤害率
	PropTag_CritDamPer PropTag = 13

	// 物理伤害
	PropTag_PhyDmg PropTag = 14

	// 魔法伤害
	PropTag_MagicDmg PropTag = 15

	// 冰伤害
	PropTag_IceDmg PropTag = 16

	// 火伤害
	PropTag_FireDmg PropTag = 17

	// 电伤害
	PropTag_LightDmg PropTag = 18

	// 毒伤害
	PropTag_PosionDmg PropTag = 19

	// 元素伤害
	PropTag_EleDmg PropTag = 20

	// 冰伤害加成率
	PropTag_IceDmgPer PropTag = 21

	// 火伤害加成率
	PropTag_FireDmgPer PropTag = 22

	// 电伤害加成率
	PropTag_LightDmgPer PropTag = 23

	// 毒伤害加成率
	PropTag_PosionDmgPer PropTag = 24

	// 元素伤害加成率
	PropTag_EleDmgPer PropTag = 25

	// 冰抗
	PropTag_IceRes PropTag = 26

	// 火抗
	PropTag_FireRes PropTag = 27

	// 电抗
	PropTag_LightRes PropTag = 28

	// 毒抗
	PropTag_PosionRes PropTag = 29

	// 元素抗性
	PropTag_EleRes PropTag = 30

	// 出手速度
	PropTag_ShotSpeed PropTag = 31
)

var (
	PropTagMapperValueByName = map[string]int32{
		"Lv":           0,
		"Exp":          1,
		"Learn":        2,
		"Hp":           3,
		"Mp":           4,
		"Str":          5,
		"Dex":          6,
		"Int":          7,
		"Luc":          8,
		"Def":          9,
		"Arm":          10,
		"HitPer":       11,
		"CritPer":      12,
		"CritDamPer":   13,
		"PhyDmg":       14,
		"MagicDmg":     15,
		"IceDmg":       16,
		"FireDmg":      17,
		"LightDmg":     18,
		"PosionDmg":    19,
		"EleDmg":       20,
		"IceDmgPer":    21,
		"FireDmgPer":   22,
		"LightDmgPer":  23,
		"PosionDmgPer": 24,
		"EleDmgPer":    25,
		"IceRes":       26,
		"FireRes":      27,
		"LightRes":     28,
		"PosionRes":    29,
		"EleRes":       30,
		"ShotSpeed":    31,
	}

	PropTagMapperNameByValue = map[int32]string{
		0:  "Lv",
		1:  "Exp",
		2:  "Learn",
		3:  "Hp",
		4:  "Mp",
		5:  "Str",
		6:  "Dex",
		7:  "Int",
		8:  "Luc",
		9:  "Def",
		10: "Arm",
		11: "HitPer",
		12: "CritPer",
		13: "CritDamPer",
		14: "PhyDmg",
		15: "MagicDmg",
		16: "IceDmg",
		17: "FireDmg",
		18: "LightDmg",
		19: "PosionDmg",
		20: "EleDmg",
		21: "IceDmgPer",
		22: "FireDmgPer",
		23: "LightDmgPer",
		24: "PosionDmgPer",
		25: "EleDmgPer",
		26: "IceRes",
		27: "FireRes",
		28: "LightRes",
		29: "PosionRes",
		30: "EleRes",
		31: "ShotSpeed",
	}
)

func (self PropTag) String() string {
	name, _ := PropTagMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DataConfig
type DataConfig struct {

	//Buff
	Buff []*BuffDefine

	//Skill
	Skill []*SkillDefine

	//SkillEffect
	SkillEffect []*SkillEffectDefine

	//Modifier
	Modifier []*ModifierDefine

	//Unit
	Unit []*UnitDefine
}

// Defined in table: Buff
type BuffDefine struct {

	//唯一ID
	ID int32

	//名称
	Name string

	//描述
	Desc string

	//图标
	Icon string

	//buff类型
	Type int32

	//持续回合
	Duration int32

	//参数
	Args []int32

	//buff组标识
	Group int32

	//是否减益
	IsDebuff bool

	//覆盖标签
	Overlay int32

	//免疫buff列表
	ImmunityList []int32

	//冲突buff列表
	ConflictList []int32

	//是否显示
	IsDisplay bool

	//特效
	Effect string
}

// Defined in table: Skill
type SkillDefine struct {

	//唯一ID
	ID int32

	//名称
	Name string

	//技能描述
	Desc string

	//是否被动
	IsPassive bool

	//目标筛选类型
	TargetFilter int32

	//修改器id列表
	ModifierIDs []int32

	//耗费mp
	CostMp int32

	//冷却时间(回合)
	CD int32

	//图标
	Icon string

	//技能特效
	SkillEffect int32

	//目标特效
	TargetEffect int32
}

// Defined in table: SkillEffect
type SkillEffectDefine struct {

	//唯一ID
	ID int32

	//描述
	Desc string

	//特效类型
	EffectType int32

	//持续时间(毫秒)
	Duration int32

	//特效预制体
	Prefab string
}

// Defined in table: Modifier
type ModifierDefine struct {

	//唯一ID
	ID int32

	//效果器描述
	Desc string

	//效果器类型
	Type int32

	//参数
	Args []int32
}

// Defined in table: Unit
type Prop struct {

	// 类型
	Tag PropTag

	// 值
	Value int32
}

// Defined in table: Unit
type UnitDefine struct {

	//唯一ID
	ID int32

	//名称
	Name string

	//阵营
	Camp int32

	//类型
	Type int32

	//皮肤
	Skin string

	//携带技能
	Skills []int32

	//血
	Hp int32

	//蓝
	Mp int32

	//防御
	Def int32

	//物攻
	PhyAtk int32

	//魔攻
	MagAtk int32

	//命中值
	Hit int32

	//闪避值
	Dod int32

	//暴击率
	CritRate int32
}

// DataConfig 访问接口
type DataConfigTable struct {

	// 表格原始数据
	DataConfig

	// 索引函数表
	indexFuncByName map[string][]func(*DataConfigTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*DataConfigTable) error

	// 加载前回调
	preFuncList []func(*DataConfigTable) error

	// 加载后回调
	postFuncList []func(*DataConfigTable) error

	BuffByID map[int32]*BuffDefine

	SkillByID map[int32]*SkillDefine

	SkillEffectByID map[int32]*SkillEffectDefine

	ModifierByID map[int32]*ModifierDefine

	UnitByID map[int32]*UnitDefine
}

// 从json文件加载
func (self *DataConfigTable) Load(filename string) error {

	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab DataConfig

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.DataConfig = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *DataConfigTable) RegisterIndexEntry(name string, indexCallback func(*DataConfigTable) error, clearCallback func(*DataConfigTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *DataConfigTable) RegisterPreEntry(callback func(*DataConfigTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *DataConfigTable) RegisterPostEntry(callback func(*DataConfigTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个DataConfig表读取实例
func NewDataConfigTable() *DataConfigTable {
	return &DataConfigTable{

		indexFuncByName: map[string][]func(*DataConfigTable) error{

			"Buff": {func(tab *DataConfigTable) error {

				// Buff
				for _, def := range tab.Buff {

					if _, ok := tab.BuffByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in BuffByID: %v", def.ID))
					}

					tab.BuffByID[def.ID] = def

				}

				return nil
			}},

			"Skill": {func(tab *DataConfigTable) error {

				// Skill
				for _, def := range tab.Skill {

					if _, ok := tab.SkillByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in SkillByID: %v", def.ID))
					}

					tab.SkillByID[def.ID] = def

				}

				return nil
			}},

			"SkillEffect": {func(tab *DataConfigTable) error {

				// SkillEffect
				for _, def := range tab.SkillEffect {

					if _, ok := tab.SkillEffectByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in SkillEffectByID: %v", def.ID))
					}

					tab.SkillEffectByID[def.ID] = def

				}

				return nil
			}},

			"Modifier": {func(tab *DataConfigTable) error {

				// Modifier
				for _, def := range tab.Modifier {

					if _, ok := tab.ModifierByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in ModifierByID: %v", def.ID))
					}

					tab.ModifierByID[def.ID] = def

				}

				return nil
			}},

			"Unit": {func(tab *DataConfigTable) error {

				// Unit
				for _, def := range tab.Unit {

					if _, ok := tab.UnitByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in UnitByID: %v", def.ID))
					}

					tab.UnitByID[def.ID] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*DataConfigTable) error{

			"Buff": {func(tab *DataConfigTable) error {

				// Buff

				tab.BuffByID = make(map[int32]*BuffDefine)

				return nil
			}},

			"Skill": {func(tab *DataConfigTable) error {

				// Skill

				tab.SkillByID = make(map[int32]*SkillDefine)

				return nil
			}},

			"SkillEffect": {func(tab *DataConfigTable) error {

				// SkillEffect

				tab.SkillEffectByID = make(map[int32]*SkillEffectDefine)

				return nil
			}},

			"Modifier": {func(tab *DataConfigTable) error {

				// Modifier

				tab.ModifierByID = make(map[int32]*ModifierDefine)

				return nil
			}},

			"Unit": {func(tab *DataConfigTable) error {

				// Unit

				tab.UnitByID = make(map[int32]*UnitDefine)

				return nil
			}},
		},

		BuffByID: make(map[int32]*BuffDefine),

		SkillByID: make(map[int32]*SkillDefine),

		SkillEffectByID: make(map[int32]*SkillEffectDefine),

		ModifierByID: make(map[int32]*ModifierDefine),

		UnitByID: make(map[int32]*UnitDefine),
	}
}
